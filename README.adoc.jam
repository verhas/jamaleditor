{%@snip:xml pom=pom.xml%}\
{%#define VERSION={%pom /project/version/text()%}%}\
{%@snip:collect from=src/main/java%}

= WebBased Jamal Editor {%VERSION%}

This project is an experimental project that I started for two reasons:

Play a bit around with Vaadin to see how easy it is to create something simple with a UI but without JavaScript or TypeScript.
Although Vaadin cannot be used for heavy-load, public facing applications, it still can be used to prototype applications and to develop applications with limited user base.

image::image-2023-04-13-17-19-14-998.png[]

A web technology based editor running on localhost is definitely implies a limited user base.

The rest of this readme mainly generated by Vaadin startup.
I slightly modified it.

== Running the application

The project is a standard Maven project.
I did not even Jamalified the `pom.xml`.
It is almost as it was generated by the Vaadin startup generator.
To run it from the command line, type `mvnw` (Windows), or `./mvnw` (Mac &amp; Linux), then open
http://localhost:8080 in your browser.

You can also import the project to your IDE of choice as you would with any Maven project.
Read more on https://vaadin.com/docs/latest/guide/step-by-step/importing[how to import Vaadin projects to different IDEs] (Eclipse, IntelliJ IDEA, NetBeans, and VS Code).

== Configuring the application

The application can be configured creating a `{%@snip JAMAL_EDITOR_PROPERTIES%}` file in the directory, where the application was started.

The following properties are supported:

{%#trimLines
{%#replaceLines replace="/\\s+\\*\\s+/" replace="/<p>//"
{%!@snip (poly) CONFIG\d{3}%}
%}%}

== Deploying to Production

To create a production build, call

Windows:

  mvnw clean package -Pproduction

or Mac &amp; Linux:

  ./mvnw clean package -Pproduction

This will build a JAR file with all the dependencies and front-end resources, ready to be deployed.
The file can be found in the `target` folder after the build completes.

Once the JAR file is built, you can run it using

  java -jar target/jamal-editor-{%VERSION%}.jar

views of your application.

* `views` folder in `frontend/` contains the client-side JavaScript views of your application.
* `themes` folder in `frontend/` contains the custom CSS styles.

== Useful links

* Read the documentation at https://vaadin.com/docs[vaadin.com/docs].
* Follow the tutorial at https://vaadin.com/docs/latest/tutorial/overview[vaadin.com/docs/latest/tutorial/overview].
* Create new projects at https://start.vaadin.com/[start.vaadin.com].
* Search UI components and their usage examples at https://vaadin.com/docs/latest/components[vaadin.com/docs/latest/components].
* View use case applications that demonstrate Vaadin capabilities at https://vaadin.com/examples-and-demos[vaadin.com/examples-and-demos].
* Build any UI without custom CSS by discovering Vaadin's set of https://vaadin.com/docs/styling/lumo/utility-classes[CSS utility classes].
* Find a collection of solutions to common use cases at https://cookbook.vaadin.com/[cookbook.vaadin.com].
* Find add-ons at https://vaadin.com/directory[vaadin.com/directory].
* Ask questions on https://stackoverflow.com/questions/tagged/vaadin[Stack Overflow] or join our https://discord.gg/MYFq5RTbBn[Discord channel].
* Report issues, create pull requests in https://github.com/vaadin[GitHub].